name: TikTok Downloader

on:
  workflow_dispatch: # Jalankan manual
  schedule:
    - cron: "*/120 * * * *" # Jadwal (Setiap hari pukul 12:00 UTC)

jobs:
  download_tiktok:
    runs-on: ubuntu-latest

    steps:
      # Langkah 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Langkah 2: Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Langkah 3: Install dependencies
      - name: Install Dependencies
        run: |
          pip install requests yt-dlp
          sudo apt-get update
          sudo -v ; curl https://rclone.org/install.sh | sudo bash -s beta
          
      - name: Set Telegram Secrets and Cookies
        run: |
          echo "${{ secrets.TT_COOKIES }}" > cookies.txt
        env:
          TT_COOKIES: ${{ secrets.TT_COOKIES }}      

      - name: Load Rclone Config from Secret
        run: |
          wget "$RCLONE_CONFIG"
        env:
          RCLONE_CONFIG: ${{ secrets.RCLONE_CONFIG }}
          
      # Langkah 4: Jalankan script Python
      - name: Run TikTok Downloader
        env:
          VIDEO_DIR: ${{ github.workspace }}/VIDEO/ACPN
          ARCHIVE_FILE: ${{ github.workspace }}/acpn.txt
          LOG_FILE: ${{ github.workspace }}/download.log
          NOTIF_CHANNEL_ID: '-1002471139847'  # Ganti dengan ID channel notifikasi
          VIDEO_CHANNEL_ID: '-1002355638424'  # Ganti dengan ID channel video
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}  # Token bot Telegram (gunakan GitHub Secrets)
          TT_COOKIES: ${{ secrets.TT_COOKIES }}  # Cookies TikTok (gunakan GitHub Secrets)
        run: |
          mkdir -p $VIDEO_DIR
          touch $ARCHIVE_FILE
          touch $LOG_FILE
          python main.py

      - name: Rclone Fallback
        env: 
          VIDEO_DIR: ${{ github.workspace }}/VIDEO/ACPN
        run: |
          rclone copy "$VIDEO_DIR" mg:Failed/ -v --progress --config rclone.conf

      - name: Push Acpn
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git pull origin main
          git add acpn.txt
          git commit -m 'Update acpn.txt after TikTok uploads'
          git push origin main

      - name: Capture and Update Bandwidth Usage
        run: |
          # Define file path for storing cumulative bandwidth usage
          BANDWIDTH_FILE="bandwidth_usage.txt"

          # Extract current RX and TX data from ifconfig
          RX=$(ifconfig eth0 | grep 'RX packets' | awk '{print $5}')  # Received bytes
          TX=$(ifconfig eth0 | grep 'TX packets' | awk '{print $5}')  # Transmitted bytes
          RX_MB=$(echo "$RX / 1048576" | bc)  # Convert to MB
          TX_MB=$(echo "$TX / 1048576" | bc)  # Convert to MB
  
          # Initialize cumulative variables
          TOTAL_RX=$RX_MB
          TOTAL_TX=$TX_MB

          # If a previous file exists, read its data
          if [ -f "$BANDWIDTH_FILE" ]; then
            PREV_RX=$(grep "Received" "$BANDWIDTH_FILE" | awk '{print $2}')  # Extract previous RX
            PREV_TX=$(grep "Transmitted" "$BANDWIDTH_FILE" | awk '{print $2}')  # Extract previous TX

          # Add previous data to current data
            TOTAL_RX=$(echo "$PREV_RX + $RX_MB" | bc)
            TOTAL_TX=$(echo "$PREV_TX + $TX_MB" | bc)
          fi

          # Save the updated data back to the file
          echo "Bandwidth Usage All Time:" > "$BANDWIDTH_FILE"
          echo "  Received: $TOTAL_RX MB" >> "$BANDWIDTH_FILE"
          echo "  Transmitted: $TOTAL_TX MB" >> "$BANDWIDTH_FILE"

          # Display the updated data
          cat "$BANDWIDTH_FILE"

          # Content for message
          MESSAGE=$(cat bandwidth_usage.txt)
          
          # Telegram Bot API endpoint
          TELEGRAM_API_URL="https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

          # Send the message
          curl -s -X POST $TELEGRAM_API_URL -d chat_id="${{ secrets.NOTIF_CHANNEL_ID }}" -d text="$MESSAGE"

          # Commit the updated data to the repository
          git config --local user.name "github-actions"
          git config --local user.email "action@github.com"
          git pull
          git add "$BANDWIDTH_FILE"
          git commit -m "Update cumulative bandwidth usage"
          git push
